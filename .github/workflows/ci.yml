name: CI

on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Build project
      run: yarn build
      
    - name: Run tests
      run: yarn test
      
    - name: Run tests with coverage
      run: yarn test:coverage
      
    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  performance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Build project
      run: yarn build
      
    - name: Performance benchmark
      id: performance
      run: |
        # Run performance test using the dedicated script
        PERF_OUTPUT=$(node scripts/performance-benchmark.js 2>&1)
        
        # Save performance output for later use
        echo "$PERF_OUTPUT" > performance_report.txt
        
        # Set output for other steps
        echo "report<<EOF" >> $GITHUB_OUTPUT
        echo "$PERF_OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Also output to console
        echo "$PERF_OUTPUT"
        
    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const performanceReport = `${{ steps.performance.outputs.report }}`;
          
          // Find existing performance comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('ðŸš€ Performance Test Results')
          );
          
          const commentBody = `${performanceReport}
          
          ---
          *Performance test run on commit ${context.sha.substring(0, 7)}*`;
          
          if (existingComment) {
            // Update existing comment
            await github.rest.pulls.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.pulls.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
          
    - name: Commit performance results to commit status
      if: github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        script: |
          const performanceReport = `${{ steps.performance.outputs.report }}`;
          
          // Extract key metrics for commit status
          const lines = performanceReport.split('\n');
          const throughputLine = lines.find(line => line.includes('Throughput:'));
          const avgLine = lines.find(line => line.includes('Average per word:'));
          
          let description = 'Performance test completed';
          if (throughputLine && avgLine) {
            const throughput = throughputLine.match(/(\d+) words\/second/)?.[1];
            const avgTime = avgLine.match(/([\d.]+)ms/)?.[1];
            description = `${throughput} words/sec, ${avgTime}ms/word avg`;
          }
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'success',
            target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: description,
            context: 'performance/benchmark'
          });
